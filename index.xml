<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Adam Oudad</title>
    <link>https://adamoudad.github.io/</link>
    <description>Recent content on Adam Oudad</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 18 Nov 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://adamoudad.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ask this bot to solve your dilemmas</title>
      <link>https://adamoudad.github.io/posts/pierre-corneille-bot/</link>
      <pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://adamoudad.github.io/posts/pierre-corneille-bot/</guid>
      <description>Life is full of dilemma and tough choices for our greatest enjoyment. Well, some might be annoying to resolve. So I present to you the contribution from machine learning in the direction of relieving ourselves the burden of having to make choices in our lives.  You probably have played a popular game named &amp;#34;Would you rather&amp;#34; in which two options are considered and only one should be choosen.</description>
    </item>
    
    <item>
      <title>Training models with a progress bar</title>
      <link>https://adamoudad.github.io/posts/progress_bar_with_tqdm/</link>
      <pubDate>Mon, 12 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://adamoudad.github.io/posts/progress_bar_with_tqdm/</guid>
      <description>tqdm 1is a Python library for adding progress bar. It lets you configure and display a progress bar with metrics you want to track. Its ease of use and versatility makes it the perfect choice for tracking machine learning experiments.  I organize this tutorial in two parts. I will first introduce tqdm, then show an example for machine learning. For each code fragment in this article, we will import the sleep function from Python&amp;#39;s time library as it will let us slow down the program to see the progress bar update.</description>
    </item>
    
    <item>
      <title>How to format dates in Python3</title>
      <link>https://adamoudad.github.io/posts/format-dates-python3/</link>
      <pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://adamoudad.github.io/posts/format-dates-python3/</guid>
      <description>You have probably used Python&amp;#39;s formatting syntax before. But how do you format a date? With datetime objects, you can use %Y, %m, %d to display respectively, the year, the month and the day of an object, in numerical form (that is, March will be replaced by the number &amp;#34;03&amp;#34;).  Python has several syntax for formatting strings. So that each of these lines will produce the same output.</description>
    </item>
    
    <item>
      <title>Schedule random aphorism notifications for your desktop</title>
      <link>https://adamoudad.github.io/posts/random-aphorism-notifications/</link>
      <pubDate>Thu, 18 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://adamoudad.github.io/posts/random-aphorism-notifications/</guid>
      <description>In times when we lack inspiration, it might help to have a program randomly picking an aphorism for us. An aphorism is a concise expression of a general truth or principle. But you can also use a joke or anything else.  Let&amp;#39;s see how we can implement this with desktop notifications, python, and cron. Requirements   You will need these    python3 with notify2 library.</description>
    </item>
    
    <item>
      <title>Have a bot haunt your Slack workspace</title>
      <link>https://adamoudad.github.io/posts/python-slack-bot/</link>
      <pubDate>Thu, 21 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://adamoudad.github.io/posts/python-slack-bot/</guid>
      <description>In this article we&amp;#39;ll see how to code your simple bot for Slack, and schedule it to run regularily. As some testing might be necessary, I recommend to create a dummy Slack workspace for this tutorial. Add a webhook for your Slack workspace   We first need to configure a web hook to communicate to our Slack workspace. Go to this url, choose your channel and click on add a webhook.</description>
    </item>
    
    <item>
      <title>Data processing libraries in Python</title>
      <link>https://adamoudad.github.io/posts/data-processing-libraries/</link>
      <pubDate>Tue, 12 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://adamoudad.github.io/posts/data-processing-libraries/</guid>
      <description>With most popular libraries and most of bleeding-edge technologies implemented, Python is usually recommended as a good choice for machine learning related projects. Yet it can be daunting when looking at all different libraries that exist, and difficult to choose a couple to get started.  Machine learning is founded on data processing, and performances of models will heavily depend on your ability to read and transform data in a suitable format for the task you wish to do.</description>
    </item>
    
    <item>
      <title>Your python interpreter inside a docker container with Emacs</title>
      <link>https://adamoudad.github.io/posts/emacs/docker-python-shell-emacs/</link>
      <pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://adamoudad.github.io/posts/emacs/docker-python-shell-emacs/</guid>
      <description>Emacs has this very powerful package Elpy which is usually recommended if you want to code in Python.  Docker can containerize your Python interpreter so that you can seemlessly run your applications on any device.  In Emacs with elpy installed, C-c C-c binding (C is for Control key) runs elpy-shell-send-region-to-buffer and is very handy for running on the fly python commands for testing your code. It actually use the content of the variable python-shell-interpreter for the python interpreter.</description>
    </item>
    
    <item>
      <title>Generative Adversarial Networks can crack your password!</title>
      <link>https://adamoudad.github.io/posts/passgan/</link>
      <pubDate>Tue, 31 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://adamoudad.github.io/posts/passgan/</guid>
      <description>I stumbled upon an article using neural networks that guess passwords. It shows an original application of Generative Adversarial Networks (GAN). What are GAN?   Generative Adversarial Networks are three words that have been used a lot during the past few years in Artificial Intelligence research. It refers to neural networks that have been trained in the adversarial framework. A neural network is a function with many parameters that can be optimized from assessing the errors the network makes from the expected output, or ground-truth.</description>
    </item>
    
    <item>
      <title>A guided tour of classification metrics</title>
      <link>https://adamoudad.github.io/posts/classification-metrics/</link>
      <pubDate>Wed, 25 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://adamoudad.github.io/posts/classification-metrics/</guid>
      <description>Accuracy, precision, recall, and F1-score are metrics used to assess automatic classifiers. These metrics are calculated from a confusion matrix. Say we have spam filter which tells whether a mail is spam or not. With a test dataset of 100 spam emails and 900 non-spam, we get the following results.     Actual class: Spam Actual class: Non-spam     Prediction class: Spam 85 100   Prediction class: Non-spam 15 800     This confusion matrix shows the confusions the system makes in its predictions.</description>
    </item>
    
    <item>
      <title>Remote desktop with Linux client and Windows server</title>
      <link>https://adamoudad.github.io/posts/remote_desktop_linux_windows/</link>
      <pubDate>Fri, 13 Mar 2020 03:49:04 +0900</pubDate>
      
      <guid>https://adamoudad.github.io/posts/remote_desktop_linux_windows/</guid>
      <description>I just had to set up a remote desktop between Linux and Windows, to find out how intricate of a problem it can become. My goal was to access a Windows desktop from my Linux machine. Remmina and Windows RDP   I first tried using my go-to software, Remmina client on Linux, using the plugin for connecting to Windows remote desktop protocol (RDP). There were various unsuccessful attempts, with different settings.</description>
    </item>
    
    <item>
      <title>Deciphering Python&#39;s &#34;import this&#34;</title>
      <link>https://adamoudad.github.io/posts/zen-of-python/</link>
      <pubDate>Wed, 12 Feb 2020 03:49:04 +0900</pubDate>
      
      <guid>https://adamoudad.github.io/posts/zen-of-python/</guid>
      <description>Among well known easter eggs, Python embeds a library for displaying its famous PEP 20, called Zen of Python, which consists in 19 aphorisms giving guidelines to Python programmers. Print Zen of Python   You can print the 19 aphorisms by simply importing this. import this   This outputs The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex.</description>
    </item>
    
    <item>
      <title>Tips to write pythonic</title>
      <link>https://adamoudad.github.io/posts/pythonic/</link>
      <pubDate>Sun, 02 Feb 2020 03:49:04 +0900</pubDate>
      
      <guid>https://adamoudad.github.io/posts/pythonic/</guid>
      <description>Python community has a special words for talking about code that follows the best practices for writing in python, pythonic. The following are some tips to make the most of Python programming language.  I recommend as reference the PEP-81 (Python Enhancement Proposal) document which provides guidelines and best practices on how to write Python code. It enables to achieve better readability and consistency throughout code. Naming     Never use l, 0 or I for variable names, as these can be mistaken for 1 and 0.</description>
    </item>
    
    <item>
      <title>Bring and take concepts in languages</title>
      <link>https://adamoudad.github.io/posts/japanese/bring-or-take/</link>
      <pubDate>Fri, 24 Jan 2020 02:31:19 +0900</pubDate>
      
      <guid>https://adamoudad.github.io/posts/japanese/bring-or-take/</guid>
      <description>Bring or take confusion   I was reading this article on marca.com, when I came upon this sentence in spanish. Por el momento no hay nada oficial pero varios equipos son los que llevan tiempo pujando por hacerse con sus servicios.   Which made me remember how much I am lost whenever llevar comes out. Should I think &amp;#34;bring&amp;#34; ? &amp;#34;take&amp;#34; ? It bugged me enough to search the internet and find this stackexchange thread.</description>
    </item>
    
    <item>
      <title>Stream tweets with Tweepy in Python</title>
      <link>https://adamoudad.github.io/posts/stream_tweets_tweepy/</link>
      <pubDate>Mon, 02 Dec 2019 03:49:04 +0900</pubDate>
      
      <guid>https://adamoudad.github.io/posts/stream_tweets_tweepy/</guid>
      <description>In this tutorial, you will learn how to stream tweets with Tweepy library in Python.   Twitter API overview   Twitter offers several API, or methods you can use to retrieve tweets.    Streaming API    Search API    What we are interested in here is the streaming API. We will use it to stream statuses (this is the name given to tweets in Twitter’s API documentation).</description>
    </item>
    
    <item>
      <title>TubeChiller, an automatic youtube videos player</title>
      <link>https://adamoudad.github.io/posts/tubechiller/</link>
      <pubDate>Mon, 02 Dec 2019 03:49:04 +0900</pubDate>
      
      <guid>https://adamoudad.github.io/posts/tubechiller/</guid>
      <description>I wrote a youtube playlist generator in javascript. TubeChiller is a tool for automatically play youtube videos provided in a list of urls.    Credit: https://pixabay.com/images/id-3080834/
  Background   I have been browsing youtube and ended up with a significant amount of youtube urls in my bookmarks, that point to musics or podcasts.  There exists many program that can play youtube videos, such as VLC or Totem.</description>
    </item>
    
    <item>
      <title>Vectorizing text: Word2Vec</title>
      <link>https://adamoudad.github.io/posts/word2vec/</link>
      <pubDate>Wed, 27 Nov 2019 03:49:04 +0900</pubDate>
      
      <guid>https://adamoudad.github.io/posts/word2vec/</guid>
      <description>The idea with greatest impact in Word2Vec1 2 was that vector representations could capture linguistic regularities, which can be retrieved through vector arithmetics vec(&amp;#39;Rome&amp;#39;) ≈ vec(&amp;#39;Paris&amp;#39;) - vec(&amp;#39;France&amp;#39;) + vec(&amp;#39;Italy&amp;#39;) vec(&amp;#39;Queen&amp;#39;) ≈ vec(&amp;#39;King&amp;#39;) - vec(&amp;#39;Man&amp;#39;) + vec(&amp;#39;Woman&amp;#39;)   Awesome ! How could such results be achieved ? They came from the following assumption   The meaning of a word can be inferred by the company it keeps   Indeed, Word2Vec was built using unsupervised learning on huge quantity of text, by predicting words, given their context.</description>
    </item>
    
    <item>
      <title>List of datasets</title>
      <link>https://adamoudad.github.io/posts/datasets/</link>
      <pubDate>Wed, 30 Oct 2019 03:49:04 +0900</pubDate>
      
      <guid>https://adamoudad.github.io/posts/datasets/</guid>
      <description>Machine Learning requires data. To obtain some, one way is to scrape or retrieve data directly from somewhere. Another way is to reuse datasets freely available over the internet, specially made for most common tasks. Because it has become so frequent for data scientists to take much time searching and processing data, Google has its own Dataset search tool. There are also big lists of datasets for research purpose, such as this one.</description>
    </item>
    
    <item>
      <title>Usages of する</title>
      <link>https://adamoudad.github.io/posts/japanese/suru/</link>
      <pubDate>Wed, 23 Oct 2019 02:31:19 +0900</pubDate>
      
      <guid>https://adamoudad.github.io/posts/japanese/suru/</guid>
      <description>Do you know する? This verb you can use in many case to say &amp;#34;I do stuff&amp;#34;, right ? Yet what if I told you could say far more than just a lame 私はスポーツする? する basics   We start here with the basics, that is the ~をする form. Use it to express an activity you do regularily. ラグビーをする。  ~がする   You can express a feeling, a sensation with ~がする.</description>
    </item>
    
    <item>
      <title>Word embeddings with sound</title>
      <link>https://adamoudad.github.io/posts/sound-word2vec/</link>
      <pubDate>Mon, 21 Oct 2019 03:49:04 +0900</pubDate>
      
      <guid>https://adamoudad.github.io/posts/sound-word2vec/</guid>
      <description>I came across this article called Sound-Word2Vec:Learning Word Representations Grounded in Sounds1, which caught my attention as it aims at creating word embeddings in an original way, using voiced sounds of words. What is embedding   Embedding in Machine Learning refers to a method for capturing the information of an input data into a dense representation. This way, we obtain an embedding space, which should have interesting properties like being friendly to vector arithmetics, which is not the case of original raw data.</description>
    </item>
    
    <item>
      <title>Vectorizing text</title>
      <link>https://adamoudad.github.io/posts/vectorizing-text/</link>
      <pubDate>Thu, 17 Oct 2019 03:49:04 +0900</pubDate>
      
      <guid>https://adamoudad.github.io/posts/vectorizing-text/</guid>
      <description>Character, word, sentence and document embeddings are popular because they are efficient. In the case of words, such embeddings represent words in their meaning, their role and their hierarchy in texts.  We have seen a clear improvement of word embeddings thanks to Mikolov et al. at Google, with Word2Vec in 2013. Since then, many kinds of embeddings have been developped for different purposes. We can cite for example Fasttext by Facebook, Bert by Google.</description>
    </item>
    
    <item>
      <title>When to use が or は?</title>
      <link>https://adamoudad.github.io/posts/japanese/ga-or-ha/</link>
      <pubDate>Thu, 17 Oct 2019 02:31:19 +0900</pubDate>
      
      <guid>https://adamoudad.github.io/posts/japanese/ga-or-ha/</guid>
      <description>This is one of the most fearful grammatical points of any japanese learner during their journey to japanese mastery.  This article gives some rules that will help confusion and will make you sound like a native. Relatively to information intended to be delivered 伝えたい情報   は will always precede the information, whereas が will follow it. Similarily, は will always precede an interrogative, while が will follow it.</description>
    </item>
    
    <item>
      <title>Multiply your productivity by one million with these simple tricks</title>
      <link>https://adamoudad.github.io/posts/productivity/</link>
      <pubDate>Thu, 10 Oct 2019 03:49:04 +0900</pubDate>
      
      <guid>https://adamoudad.github.io/posts/productivity/</guid>
      <description>The idea behind most productivity tips is that you lose if you touch your mouse, as it is such a time consuming move and unbearable physical effort.  But you also lose points when doing big jumps on your keyboard, for example when you try reaching for the arrow keys.  So what should we do ? Here are some tips. Tridactyl on Firefox   Tridactyl is an extension available for Firefox that enable a keyboard-based navigation.</description>
    </item>
    
    <item>
      <title>Hugo and Katex</title>
      <link>https://adamoudad.github.io/posts/hugo-katex/</link>
      <pubDate>Mon, 20 May 2019 03:49:04 +0900</pubDate>
      
      <guid>https://adamoudad.github.io/posts/hugo-katex/</guid>
      <description>I followed this good tutorial on how to add \(\KaTeX\) to hugo.  Here is an example showing that KaTeX (should) now work. $$\int_{a}^{b} x^2 dx$$  Here are some remarks I have about the original tutorial. Auto-rendering   Add the following script in the footer &amp;lt;script defer src=&amp;#34;https://cdn.jsdelivr.net/npm/katex@0.10.0-rc.1/dist/contrib/auto-render.min.js&amp;#34; integrity=&amp;#34;sha384-yACMu8JWxKzSp/C1YV86pzGiQ/l1YUfE8oPuahJQxzehAjEt2GiQuy/BIvl9KyeF&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34; onload=&amp;#34;renderMathInElement(document.body);&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;   This will activate the auto rendering Other remarks     {{ end }} is unnecessary, only write the following to include the katex.</description>
    </item>
    
    <item>
      <title>First post</title>
      <link>https://adamoudad.github.io/posts/my-first-post/</link>
      <pubDate>Thu, 16 May 2019 02:31:19 +0900</pubDate>
      
      <guid>https://adamoudad.github.io/posts/my-first-post/</guid>
      <description> This is the first post.  I use a theme called m10c created by Vaga, thanks to him !  I was using Jekyll in previous websites, and Hugo is quite impressive in ease of use.    Great themes    Many shortcodes that lets you embed youtube videos, for example, without coding   </description>
    </item>
    
  </channel>
</rss>